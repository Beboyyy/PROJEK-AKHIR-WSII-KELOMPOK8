{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mufti shofi\\\\Pictures\\\\ProjectAkhir\\\\Frontend\\\\src\\\\pages\\\\Buku.js\";\nimport React, { Component } from 'react';\nimport Card from '../components/Card';\nimport $ from 'jquery';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Buku extends Component {\n  constructor() {\n    super();\n\n    this.setUser = () => {// Your existing user setup code...\n    };\n\n    this.fetchBooks = () => {\n      // Replace 'YOUR_BACKEND_API_URL' with the actual URL of your backend API.\n      fetch('YOUR_BACKEND_API_URL/api/buku').then(response => response.json()).then(data => {\n        this.setState({\n          buku: data,\n          filterBuku: data\n        });\n      }).catch(error => console.error('Error fetching books:', error));\n    };\n\n    this.Save = event => {\n      event.preventDefault();\n      const {\n        action,\n        selectedItem,\n        isbn,\n        judul,\n        penulis,\n        penerbit,\n        harga,\n        cover\n      } = this.state;\n\n      if (action === 'insert') {\n        // Save the new book to the backend.\n        fetch('YOUR_BACKEND_API_URL/api/buku', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            isbn,\n            judul,\n            penulis,\n            penerbit,\n            harga,\n            cover\n          })\n        }).then(response => response.json()).then(() => {\n          this.fetchBooks(); // Fetch books again after adding a new one.\n\n          $(\"#modal\").hide();\n        }).catch(error => console.error('Error adding book:', error));\n      } else if (action === 'update') {\n        // Update the book on the backend.\n        fetch(`YOUR_BACKEND_API_URL/api/buku/${selectedItem.isbn}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            judul,\n            penulis,\n            penerbit,\n            harga,\n            cover\n          })\n        }).then(() => {\n          this.fetchBooks(); // Fetch books again after updating.\n\n          $(\"#modal\").hide();\n        }).catch(error => console.error('Error updating book:', error));\n      }\n    };\n\n    this.state = {\n      buku: [],\n      action: '',\n      isbn: '',\n      judul: '',\n      penulis: '',\n      penerbit: '',\n      harga: 0,\n      cover: '',\n      selectedItem: null,\n      keyword: ''\n    };\n    this.state.filterBuku = this.state.buku;\n  }\n\n  componentDidMount() {\n    this.setUser();\n    this.fetchBooks(); // Fetch books from the backend when the component mounts.\n  }\n\n  // Other methods...\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mufti shofi/Pictures/ProjectAkhir/Frontend/src/pages/Buku.js"],"names":["React","Component","Card","$","Buku","constructor","setUser","fetchBooks","fetch","then","response","json","data","setState","buku","filterBuku","catch","error","console","Save","event","preventDefault","action","selectedItem","isbn","judul","penulis","penerbit","harga","cover","state","method","headers","body","JSON","stringify","hide","keyword","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '../components/Card';\r\nimport $ from 'jquery';\r\nimport '../index.css';\r\n\r\nexport default class Buku extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      buku: [],\r\n      action: '',\r\n      isbn: '',\r\n      judul: '',\r\n      penulis: '',\r\n      penerbit: '',\r\n      harga: 0,\r\n      cover: '',\r\n      selectedItem: null,\r\n      keyword: '',\r\n    };\r\n    this.state.filterBuku = this.state.buku;\r\n  }\r\n\r\n  setUser = () => {\r\n    // Your existing user setup code...\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setUser();\r\n    this.fetchBooks(); // Fetch books from the backend when the component mounts.\r\n  }\r\n\r\n  fetchBooks = () => {\r\n    // Replace 'YOUR_BACKEND_API_URL' with the actual URL of your backend API.\r\n    fetch('YOUR_BACKEND_API_URL/api/buku')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ buku: data, filterBuku: data });\r\n      })\r\n      .catch((error) => console.error('Error fetching books:', error));\r\n  };\r\n\r\n  // Other methods...\r\n\r\n  Save = (event) => {\r\n    event.preventDefault();\r\n    const { action, selectedItem, isbn, judul, penulis, penerbit, harga, cover } = this.state;\r\n\r\n    if (action === 'insert') {\r\n      // Save the new book to the backend.\r\n      fetch('YOUR_BACKEND_API_URL/api/buku', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          isbn,\r\n          judul,\r\n          penulis,\r\n          penerbit,\r\n          harga,\r\n          cover,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then(() => {\r\n          this.fetchBooks(); // Fetch books again after adding a new one.\r\n          $(\"#modal\").hide();\r\n        })\r\n        .catch((error) => console.error('Error adding book:', error));\r\n    } else if (action === 'update') {\r\n      // Update the book on the backend.\r\n      fetch(`YOUR_BACKEND_API_URL/api/buku/${selectedItem.isbn}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          judul,\r\n          penulis,\r\n          penerbit,\r\n          harga,\r\n          cover,\r\n        }),\r\n      })\r\n        .then(() => {\r\n          this.fetchBooks(); // Fetch books again after updating.\r\n          $(\"#modal\").hide();\r\n        })\r\n        .catch((error) => console.error('Error updating book:', error));\r\n    }\r\n  };\r\n\r\n  // Other methods...\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {/* Your existing JSX code */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}